#!/bin/bash

# Studenten:
#			Huseyin Caliskan 2143416
#			Storm Witziers 2142010
#
#
# Geïmplementeerde eisen:
# 
# Alleen bestanden in opgegeven start-directory (inclusief onderliggende directories) worden bekeken
# Duplicaten van bestanden worden correct gevonden. Je mag hiervoor geen bestaand tool gebruiken (behalve shasum zoals vermeld bij de tips onderaan)
# Verplicht getopts gebruiken voor het interpreteren van opties (zie uitwerking van textfrutter in oefenopgaven week 5);
# optie -r om gevonden duplicaten direct te laten verwijderen;
# optie -x <naam> om een file op te geven die buiten beschouwing gelaten moet worden bij het zoeken naar duplicaten. (mag meerdere keren worden gebruikt, elke uit te sluiten file moet met een aparte -x genoemd worden; geen wildcards gebruiken zoals *);
# optie -l <landcode> om een landcode in 2 letters mee te geven, waarmee de taal van de meldingen kan worden ingesteld. Om dat te bouwen kun je voor alle meldingen shell variabelen definiëren, die je voor elke taal in een bestand zet. Dan kun je het juiste taalbestand laden met behulp van het source-mechanisme.
# het script geeft aan welke duplicaten er gevonden zijn en wat de actie was. Je mag zelf bepalen hoe je deze meldingen precies weergeeft.
# Het script maakt een directory ~/var en voegt regels aan een log file toe (duper.log) waarin diverse zaken omtrent het proces worden opgeslagen, zoals bijvoorbeeld:
# 		start-tijd
#		eind-tijd
#		aantal gevonden en verwijderde duplicaten
# foutmelding geven en daarna stoppen in de volgende gevallen:
# 		er zijn opties meegegeven die je niet geïmplementeerd hebt, druk dan een usage string af;
# 		de start-directory bestaat niet, is geen directory, of mag niet gelezen worden.

# Extra
# Voeg een optie -X <filename> toe (hoofdletter X), met als argument een configuratie file waarin alle te excluden files en/of directories staan opgesomd, één per regel. Dat is dus een alternatief voor het meerdere malen gebruiken van de -x optie (kleine x).											
# optie -f <filename> om een bestand aan te maken met daarin de absolute paden naar alle gevonden duplicaten. Op elke regel staat 1 bestandsnaam omgeven door "-karakters. Dit bestand kan gebruikt worden om op een later tijdstip een bewerking op de gevonden duplicaten te kunnen doen met andere tool dan duper.
# Zoek uit hoe je een eigen man pagemaakt, en maak er een voor duper.

contains_file(){
	
	local fileName=$(basename -- "$1")

	for i in "${excluded_files[@]}" ; do 
		[[ "$fileName" == "$i"  ]] && return 0
	done
	return 1
}

contains_dir(){

	local dirName=$(dirname -- "$1")

	for i in "${excluded_dirs[@]}" ; do 
		[[ "$dirName" =~ "$i"  ]] && return 0
	done	
	return 1
}


find_dupe(){
	
	local sha=

	local sha_collection=()
	local file_collection=()
	
	local find_input=

 	[ ${#excluded_files[@]} -gt 0 ] && printf '%s %s| ' "$LANG_FILE_EXCLUDED" "${excluded_files[@]}"
	echo ' '
	[ ${#excluded_dirs[@]} -gt 0 ] && printf '%s %s| ' "$LANG_DIR_EXCLUDED" "${excluded_dirs[@]}"
	echo ' '	
	
	while read -r line ; do
		local excluded=
		
		contains_dir "$line"
		excluded=$?
		contains_file "$line"
		excluded=$?

		if [ $excluded -eq 1 ] ; then

			sha=$( shasum -a 256 "$line" ) #creates sha for all the files currencly searching
			sha_collection+=($(echo "$sha" | awk '{ print $1 }'))
			file_collection+=("$line")
		fi
		#printf "%s SHA: %s \\n" "$line" "$sha" 	

	done < <(find "$startDirectory" -type f)	

	
	if [ "${#sha_collection[@]}" -eq 0 ] ; then       
		echo "$LANG_NO_FILE_TO_CHECK"
	else
		local tempArray_sha=()
		local tempArray_file=()

		local dupes=()

		for i in "${!sha_collection[@]}" ; do
			
			local isDupe=

			for j in "${!tempArray_sha[@]}" ; do 

				if [[ "${sha_collection[$i]}" == "${tempArray_sha[$j]}" ]] ; then
					dupes+=("${file_collection[$i]}")
					isDupe=true

					echo "${file_collection[$i]} $LANG_DUPLICATION_FOUND ${tempArray_file[$j]}"
				fi	
			done			
			
			if [ -z "$isDupe" ] ; then 
				tempArray_sha+=("${sha_collection[$i]}") 
			       	tempArray_file+=("${file_collection[$i]}")
			fi
		done
		

		#printf '%s\n' "${tempArray[@]}"
		#printf ': %s\n' "${dupes[@]}"
		
		dupe_path=("${dupes[@]}")
		amountDuplicatesFound=$(wc -l <<< "${dupes[@]}")
		
		if [ ! -z "$fFileName" ]; then
			create_abs_filepaths_file "${dupe_path[@]}"
		fi
	fi
}

get_abs_filename() {
  # $1 : relative filename
  echo "$(cd "$(dirname "$1")" && pwd)/$(basename "$1")"
}

create_abs_filepaths_file() {
  	touch "$fFileName"

	# Empty  file if exists
	if [ -e "./fFileName" ]; then
		> "$fFileName"
	fi
	
   	arr=("$@")
   	for i in "${arr[@]}";
		do
			myabsfile=$(get_abs_filename "$i")
			
			echo '"'"$myabsfile"'"' >> "$fFileName"
		done
}

remove_dupe(){
	
	if [ ! -z "$remove" ] ; then
		
		for file in "${dupe_path[@]}" ;  do
			echo "$LANG_REMOVED $file"
			rm "$file"
		done
	fi
}

# Het script maakt een directory ~/var en voegt regels aan een log file toe (duper.log) waarin diverse zaken omtrent het proces worden opgeslagen, zoals bijvoorbeeld: start-tijd, eind-tijd
amountDuplicatesFound=0;
startTime=$(date "+%a %d %b %Y %T:%N")
log_process() {
	if [ ! -d "$HOME/var" ]; then
		mkdir ~/var
	fi
	
	endTime=$(date "+%a %d %b %Y %T:%N")
	
	logOutput="StartTime $startTime \\nEndTime: $endTime"
	
	if [ -z "$remove" ] ; then
		logOutput+="\\nAmount duplicates found: $amountDuplicatesFound\\n"
	else
		logOutput+="\\nAmount duplicates found and removed: $amountDuplicatesFound\\n"
	fi
		
	echo -e "$logOutput" >> ~/var/duper.log
}

is_dir(){

	item="$1"

	found=$(find . -type d -name "$item" | wc -l)
	[ "$found" -gt 0 ] && return 0
	found=$(find . -type f -name "$item" | wc -l)
	[ "$found" -gt 0 ] && return 1
	
	return 2
}

remove=
language="en"
fFileName=

declare -a dupe_path

declare -a excluded_files
declare -a excluded_dirs

forgotToGiveInput=
forgotten_input=
languageSelected=

while getopts ":rx:X:l:f:" args ; do
	
	case $args in
	r)
		remove=true	
		;;
	x)
		#echo "Exclude the following file $OPTARG"
		if [[ "$OPTARG" == *[/'!'@#\$%^\&*()_+]* ]] ; then
			echo "Thats not a valid argument for -x"
			exit 2
		else
			is_dir "$OPTARG"
			isDir=$?
		
			[ $isDir -eq 0 ] && excluded_dirs+=("$OPTARG")
			[ $isDir -eq 1 ] && excluded_files+=("$OPTARG")
		fi
		;;
	l)
		languageSelected=true
		language=("$OPTARG")
		;;
	f)
		fFileName=("$OPTARG")
		;;
	X)
		while IFS='' read -r line || [[ -n "$line" ]] ; do
			is_dir "$line"
			isDir=$?
		
			[ $isDir -eq 0 ] && excluded_dirs+=("$line")
			[ $isDir -eq 1 ] && excluded_files+=("$line")
		done < "$OPTARG"
		
		;;
	:)
		forgotten_input="$OPTARG"
		forgotToGiveInput=true
		;;
	\?)
    	echo "DELETE -r | EXCLUDE -x <name> | EXCLUDE FILE -X <file> | LANGUAGE -l <landcode>"
		exit 2
		;;	
	esac
done

shift $((OPTIND-1))

# Get language
if [ ! -e "$(dirname "$0")/lang/$language" ]; then
	echo "INVALID language"
	exit 2;
elif [ -d "$(dirname "$0")/lang/$language" ]; then
	echo "INVALID language"
	exit 2
fi
source "$(dirname "$0")/lang/$language"

# Get folder direction		
if [ -z "$1" ]; then
	echo "$LANG_PLEASE_PROVIDE_DIRECTORY"	
	exit 2;	
else	
	# Check if valid directory.	
	if [ ! -d "$1" ]; then	
		echo "$LANG_INVALID_DIRECTORY";	
		exit 2;	
	fi	

 	if [ ! -w "$1" ]; then	
		echo "$LANG_DIRECTORY_NO_PERMISSIONS"	
		exit 2;	
	fi	
fi
startDirectory="$1"

# OUTPUT options
if [ ! -z "$remove" ]; then 
	echo "$LANG_DELETE_ALL_DUPLICATES"
fi
if [ ! -z "$forgotToGiveInput" ]; then
	echo "$LANG_FORGOT_TO_GIVE_INPUT $forgotten_input"
fi
if [ ! -z "$languageSelected" ]; then
	echo "Landcode $language"
fi


find_dupe
remove_dupe

log_process
